{
  "manifest": {
    "name": "quick.db",
    "version": "9.1.3",
    "description": "An easy, non-locking, persistent better-sqlite3 wrapper designed to be easy to setup & utilize",
    "main": "out/index.js",
    "types": "out/index.d.ts",
    "devDependencies": {
      "@faker-js/faker": "^6.1.2",
      "@types/better-sqlite3": "^7.4.2",
      "@types/jest": "^27.0.3",
      "@types/lodash": "^4.14.178",
      "@types/write-file-atomic": "^4.0.0",
      "@typescript-eslint/eslint-plugin": "^5.8.1",
      "@typescript-eslint/parser": "^5.8.1",
      "better-sqlite3": "^7.4.5",
      "eslint": "^8.5.0",
      "eslint-config-prettier": "^8.3.0",
      "jest": "^29.3.1",
      "mongoose": "^6.9.1",
      "mysql2": "^3.2.0",
      "prettier": "^2.5.1",
      "ts-jest": "^29.0.3",
      "typedoc": "^0.23.26",
      "typescript": "^4.5.4",
      "write-file-atomic": "^5.0.0"
    },
    "dependencies": {
      "lodash": "^4.17.21"
    },
    "scripts": {
      "test": "jest --roots tests",
      "build": "tsc",
      "lint": "eslint --ext \".ts\" ./src",
      "prettier": "prettier --write ./src",
      "prepublishOnly": "tsc",
      "prepare": "tsc",
      "docgen": "typedoc"
    },
    "lint-staged": {
      "*.{ts}": "eslint"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/TrueXPixels/quick.db.git"
    },
    "keywords": [
      "database",
      "storing",
      "values",
      "easy",
      "quick",
      "sqlite",
      "sqlite3",
      "db"
    ],
    "author": {
      "name": "TrueXPixels"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/TrueXPixels/quick.db/issues"
    },
    "homepage": "https://quickdb.js.org/",
    "_registry": "npm",
    "_loc": "/home/runner/VC-Bot/.cache/yarn/v6/npm-quick-db-9.1.3-integrity/node_modules/quick.db/package.json",
    "readmeFilename": "README.md",
    "readme": "## ![Quick.db Logo](https://www.plexidev.org/quickdb.png)\n\n> Need a powerful, low-cost VPS for hosting your applications & bots 24/7? Check out our partner, [Contabo](https://www.tkqlhce.com/click-8950879-15301134)! ðŸŽ‰\n\n**Documentation:** [quickdb.js.org](https://quickdb.js.org) [[Migration Guide](https://quickdb.js.org/overview/migration-guide)] <br>\n**Support:** [discord.gg/plexidev](https://discord.gg/plexidev) <br>\n**NPM:** [npmjs.com/quick.db](https://www.npmjs.com/package/quick.db)\n\nQuick.db is an open-source package meant to provide an easy way for beginners and people of all levels to access & store data in a low to medium volume environment. All data is stored persistently via either [better-sqlite3](https://github.com/JoshuaWise/better-sqlite3) or [mysql2](https://www.npmjs.com/package/mysql2) and comes way various other quality-of-life features.\n\n-   **Persistent Storage** - Data doesn't disappear through restarts\n-   **Multiple Drivers** - You can use either better-sqlite3 or mysql2\n-   **Works out of the box** - No need to set up a database server, all the data is stored locally in the same project\n-   **Beginner Friendly** - Originally created for use in tutorials, the documentation is straightforward and jargon-free\n-   & more...\n\n## Installation\n\n<details>\n<summary>Mac Prerequisites</summary>\n<br>\n\n```bash\n1. Install XCode\n2. Run `npm i -g node-gyp` in terminal\n3. Run `node-gyp --python /path/to/python` in terminal\n```\n\n</details>\n\n```python\nnpm i quick.db better-sqlite3   # (Default) Local SQLite3 File\nnpm i quick.db mysql2    # (Alternative) MySQL Server Connection\n```\n\n> If you're having troubles installing, please follow [this troubleshooting guide](https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/troubleshooting.md).\n> Windows users may need to do additional steps listed [here](https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/troubleshooting.md).\n\n## Example\n\n```js\nconst { QuickDB } = require(\"quick.db\");\nconst db = new QuickDB(); // will make a json.sqlite in the root folder\n// if you want to specify a path you can do so like this\n// const db = new QuickDB({ filePath: \"source/to/path/test.sqlite\" });\n\n(async () => {\n    // self calling async function just to get async\n    // Setting an object in the database:\n    await db.set(\"userInfo\", { difficulty: \"Easy\" });\n    // -> { difficulty: 'Easy' }\n\n    // Getting an object from the database:\n    await db.get(\"userInfo\");\n    // -> { difficulty: 'Easy' }\n\n    // Getting an object property from the database:\n    await db.get(\"userInfo.difficulty\");\n    // -> 'Easy'\n\n    // Setting an object in the database:\n    await db.set(\"userInfo\", { difficulty: \"Easy\" });\n    // -> { difficulty: 'Easy' }\n\n    // Pushing an element to an array (that doesn't exist yet) in an object:\n    await db.push(\"userInfo.items\", \"Sword\");\n    // -> { difficulty: 'Easy', items: ['Sword'] }\n\n    // Adding to a number (that doesn't exist yet) in an object:\n    await db.add(\"userInfo.balance\", 500);\n    // -> { difficulty: 'Easy', items: ['Sword'], balance: 500 }\n\n    // Repeating previous examples:\n    await db.push(\"userInfo.items\", \"Watch\");\n    // -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 500 }\n    await db.add(\"userInfo.balance\", 500);\n    // -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 1000 }\n\n    // Fetching individual properties\n    await db.get(\"userInfo.balance\"); // -> 1000\n    await db.get(\"userInfo.items\"); // ['Sword', 'Watch']\n})();\n```\n\n## Example With MySQLDriver\n\n> **NOTE:** In order to use this driver, install `npm i mysql2` separately.\n\n```js\nconst { QuickDB, MySQLDriver } = require(\"quick.db\");\n(async () => {\n    const mysqlDriver = new MySQLDriver({\n        host: \"localhost\",\n        user: \"me\",\n        password: \"secret\",\n        database: \"my_db\",\n    });\n\n    await mysqlDriver.connect(); // connect to the database **this is important**\n\n    const db = new QuickDB({ driver: mysqlDriver });\n    // Now you can use quick.db as normal\n\n    await db.set(\"userInfo\", { difficulty: \"Easy\" });\n    // -> { difficulty: 'Easy' }\n})();\n```\n\n## Example With MongoDriver\n\n> **NOTE:** In order to use this driver, install `npm i mongoose` separately.\n\n```js\nconst { QuickDB, MongoDriver } = require(\"quick.db\");\n(async () => {\n    const mongoDriver = new MongoDriver(\"mongodb://localhost/quickdb\");\n\n    await mongoDriver.connect();\n\n    const db = new QuickDB({ driver: mongoDriver });\n    // Now you can use quick.db as normal\n\n    await db.set(\"userInfo\", { difficulty: \"Easy\" });\n    // -> { difficulty: 'Easy' }\n\n    await driver.close();\n    // disconnect from the database\n})();\n```\n\n## Example With JSONDriver\n\n> **NOTE:** In order to use this driver, install `npm i write-file-atomic` separately.\n\n```js\nconst { QuickDB, JSONDriver } = require(\"quick.db\");\nconst jsonDriver = new JSONDriver();\nconst db = new QuickDB({ driver: jsonDriver });\n\nawait db.set(\"userInfo\", { difficulty: \"Easy\" });\n```\n\n## Example With MemoryDriver\n\n> **Note:** In-memory database is not persistent and is suitable for temporary caching.\n\n```js\nconst { QuickDB, MemoryDriver } = require(\"quick.db\");\nconst memoryDriver = new MemoryDriver();\nconst db = new QuickDB({ driver: memoryDriver });\n\nawait db.set(\"userInfo\", { difficulty: \"Easy\" });\n```\n\n## Changes in 9.0.x\n\n-   Added two new database options: **driver** and **filePath**\n    -   By default, the Sqlite driver is used. Although, you can use the MySQL driver by looking at the example above. More drivers are planned for the future, feel free to submit a pull request as well.\n-   Added **.deleteAll()** method\n-   Added **.pull()** method (see below)\n-   Changed all methods to use async/await\n    -   This is because some drivers, such as MySQL, need to use await. Using async/await globally adds code consistency throughout drivers.\n-   Changed QuickDB into a class\n    -   This changes how the database is initialized, read the [migration guide](https://quickdb.js.org/overview/migration-guide) for more information.\n-   Renamed the **.subtract()** method to **.sub()** to match the length of **.add()**\n-   General bug fixes\n    -   A notable one includes storing numbers as strings in the database now working as intended.\n\n**.pull()**\n\n```js\nawait db.set(\"myArray\", [\n    \"axe\",\n    \"sword\",\n    \"shield\",\n    \"health_potion\",\n    \"mana_potion\",\n]);\n\nawait db.pull(\"myArray\", \"axe\"); // Removing a single item\n// -> ['sword', 'shield', 'health_potion', 'mana_potion']\n\nawait db.pull(\"myArray\", [\"sword\", \"shield\"]); // Removing multiple options\n// -> ['health_potion', 'mana_potion']\n\nawait db.pull(\"myArray\", (i) => i.includes(\"potion\")); // Using a function\n// -> []\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Loren Cerri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/quick.db/-/quick.db-9.1.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/quick.db/-/quick.db-9.1.3.tgz",
    "hash": "",
    "integrity": "sha512-Wi8Vcg3qsqwD/Q24W72Olhq8SsEQb+HAqrsqFiv4YYaxVB89J6ME67lZ9Vhw+YbRFO1tKz2WS6BH0Bptxg38kA==",
    "registry": "npm",
    "packageName": "quick.db",
    "cacheIntegrity": "sha512-Wi8Vcg3qsqwD/Q24W72Olhq8SsEQb+HAqrsqFiv4YYaxVB89J6ME67lZ9Vhw+YbRFO1tKz2WS6BH0Bptxg38kA== sha1-T2ko++5uR0Bq8Z8Wy2ieYHVCPFE="
  },
  "registry": "npm",
  "hash": "5a2f15720deab2ac03fd0db85bbd8e961abc4ac1106fe1c0aabb2a162bf86186b1541f3d27a304ebb959f55870f986d114ed6d2b3d964ba047d01a6dc60dfc90"
}