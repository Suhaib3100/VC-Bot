{
  "manifest": {
    "name": "@sapphire/shapeshift",
    "version": "3.8.1",
    "description": "Blazing fast input validation and transformation ⚡",
    "author": {
      "name": "@sapphire"
    },
    "license": "MIT",
    "main": "dist/index.js",
    "module": "dist/index.mjs",
    "browser": "dist/index.global.js",
    "unpkg": "dist/index.global.js",
    "types": "dist/index.d.ts",
    "exports": {
      "import": "./dist/index.mjs",
      "require": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "sideEffects": false,
    "homepage": "https://www.sapphirejs.dev/",
    "scripts": {
      "lint": "eslint src tests --ext ts --fix",
      "format": "prettier --write \"{src,tests}/**/*.ts\"",
      "docs": "typedoc-json-parser",
      "test": "vitest run",
      "test:watch": "vitest",
      "update": "yarn upgrade-interactive",
      "build": "tsup",
      "clean": "node scripts/clean.mjs",
      "typecheck": "tsc -p tsconfig.eslint.json",
      "bump": "cliff-jumper",
      "check-update": "cliff-jumper --dry-run",
      "_postinstall": "husky install .github/husky",
      "prepack": "yarn build && pinst --disable",
      "postpack": "pinst --enable"
    },
    "devDependencies": {
      "@commitlint/cli": "^17.3.0",
      "@commitlint/config-conventional": "^17.3.0",
      "@favware/cliff-jumper": "^1.9.0",
      "@favware/npm-deprecate": "^1.0.7",
      "@sapphire/eslint-config": "^4.3.8",
      "@sapphire/prettier-config": "^1.4.4",
      "@sapphire/ts-config": "^3.3.4",
      "@types/jsdom": "^20.0.1",
      "@types/lodash": "^4.14.191",
      "@types/node": "^18.11.13",
      "@typescript-eslint/eslint-plugin": "^5.46.0",
      "@typescript-eslint/parser": "^5.46.0",
      "@vitest/coverage-c8": "^0.25.7",
      "cz-conventional-changelog": "^3.3.0",
      "esbuild-plugins-node-modules-polyfill": "^1.0.7",
      "eslint": "^8.29.0",
      "eslint-config-prettier": "^8.5.0",
      "eslint-plugin-prettier": "^4.2.1",
      "husky": "^8.0.2",
      "jsdom": "^20.0.3",
      "lint-staged": "^13.1.0",
      "pinst": "^3.0.0",
      "prettier": "^2.8.1",
      "pretty-quick": "^3.1.3",
      "ts-node": "^10.9.1",
      "tsup": "^6.5.0",
      "typedoc": "^0.23.22",
      "typedoc-json-parser": "^7.0.2",
      "typescript": "^4.9.4",
      "vite": "^4.0.0",
      "vitest": "^0.25.7"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/sapphiredev/shapeshift.git"
    },
    "files": [
      "dist/**/*.js*",
      "dist/**/*.mjs*",
      "dist/**/*.d*"
    ],
    "engines": {
      "node": ">=v14.0.0",
      "npm": ">=7.0.0"
    },
    "keywords": [
      "@sapphire/shapeshift",
      "shapeshift",
      "bot",
      "typescript",
      "ts",
      "yarn",
      "sapphire",
      "schema",
      "validation",
      "type-checking",
      "checking",
      "input-validation",
      "runtime-validation",
      "ow",
      "type-validation",
      "zod"
    ],
    "bugs": {
      "url": "https://github.com/sapphiredev/shapeshift/issues"
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "lint-staged": {
      "*.{mjs,js,ts}": "eslint --fix --ext mjs,js,ts"
    },
    "config": {
      "commitizen": {
        "path": "./node_modules/cz-conventional-changelog"
      }
    },
    "publishConfig": {
      "access": "public"
    },
    "resolutions": {
      "ansi-regex": "^5.0.1",
      "minimist": "^1.2.7"
    },
    "packageManager": "yarn@3.3.0",
    "dependencies": {
      "fast-deep-equal": "^3.1.3",
      "lodash": "^4.17.21"
    },
    "_registry": "npm",
    "_loc": "/home/runner/VC-Bot/.cache/yarn/v6/npm-@sapphire-shapeshift-3.8.1-integrity/node_modules/@sapphire/shapeshift/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n\n![Sapphire Logo](https://cdn.skyra.pw/gh-assets/sapphire-banner.png)\n\n# @sapphire/shapeshift\n\n**Shapeshift**\n\nBlazing fast input validation and transformation ⚡\n\n[![GitHub](https://img.shields.io/github/license/sapphiredev/shapeshift)](https://github.com/sapphiredev/shapeshift/blob/main/LICENSE.md)\n[![codecov](https://codecov.io/gh/sapphiredev/shapeshift/branch/main/graph/badge.svg?token=RF4mMKx6lL)](https://codecov.io/gh/sapphiredev/shapeshift)\n[![npm](https://img.shields.io/npm/v/@sapphire/shapeshift?color=crimson&logo=npm&style=flat-square)](https://www.npmjs.com/package/@sapphire/shapeshift)\n\n</div>\n\n## Table of Contents\n\n- [@sapphire/shapeshift](#sapphireshapeshift)\n  - [Table of Contents](#table-of-contents)\n  - [Description](#description)\n  - [Features](#features)\n  - [Usage](#usage)\n    - [Basic usage](#basic-usage)\n    - [Defining validations](#defining-validations)\n      - [Primitives](#primitives)\n      - [Literals](#literals)\n      - [Strings](#strings)\n      - [Numbers](#numbers)\n      - [BigInts](#bigints)\n      - [Booleans](#booleans)\n      - [Arrays](#arrays)\n      - [Tuples](#tuples)\n      - [Unions](#unions)\n      - [Enums](#enums)\n      - [Maps](#maps)\n      - [Sets](#sets)\n      - [Instances](#instances)\n      - [Records](#records)\n      - [Functions // TODO](#functions--todo)\n      - [TypedArray](#typedarray)\n    - [Defining schemas (objects)](#defining-schemas-objects)\n      - [Utility types for TypeScript](#utility-types-for-typescript)\n        - [Extracting an interface from a schema](#extracting-an-interface-from-a-schema)\n        - [Defining the structure of a schema through an interface](#defining-the-structure-of-a-schema-through-an-interface)\n      - [`.extend`:](#extend)\n      - [`.pick` / `.omit`:](#pick--omit)\n      - [`.partial`](#partial)\n      - [`.required`](#required)\n    - [Handling unrecognized keys](#handling-unrecognized-keys)\n      - [`.strict`](#strict)\n      - [`.ignore`](#ignore)\n      - [`.passthrough`](#passthrough)\n    - [BaseValidator: methods and properties](#basevalidator-methods-and-properties)\n      - [`.run`](#rundata-unknown-resultt-error-given-a-validation-you-can-call-this-method-to-check-whether-or-not-the)\n      - [`.parse`](#parsedata-unknown-t-given-a-validations-you-can-call-this-method-to-check-whether-or-not-the-input-is-valid)\n      - [`.transform`](#transformrvalue-t--r-nopvalidatorr-adds-a-constraint-that-modifies-the-input)\n      - [`.reshape`](#reshapervalue-t--resultr-error--iconstraint-nopvalidatorr-adds-a-constraint-able-to-both-validate)\n      - [`.default`](#defaultvalue-t----t-transform-undefined-into-the-given-value-or-the-callbacks-returned-value)\n      - [`.optional`](#optional-a-convenience-method-that-returns-a-union-of-the-type-with-sundefined)\n      - [`.nullable`](#nullable-a-convenience-method-that-returns-a-union-of-the-type-with-snullable)\n      - [`.nullish`](#nullish-a-convenience-method-that-returns-a-union-of-the-type-with-snullish)\n      - [`.array`](#array-a-convenience-method-that-returns-an-arrayvalidator-with-the-type)\n      - [`.or`](#or-a-convenience-method-that-returns-an-unionvalidator-with-the-type-this-method-is-also-overridden-in)\n      - [`.when`](#when-adjust-the-schema-based-on-a-sibling-or-sinbling-children-fields)\n        - [Available options for providing `is`](#available-options-for-providing-is)\n        - [Resolving of the `key` (first) parameter](#resolving-of-the-key-first-parameter)\n        - [Examples](#examples)\n    - [Enabling and disabling validation](#enabling-and-disabling-validation)\n  - [Buy us some doughnuts](#buy-us-some-doughnuts)\n  - [Contributors](#contributors)\n\n## Description\n\n[Back to top][toc]\n\nA very fast and lightweight input validation and transformation library for JavaScript.\n\n> **Note**: Shapeshift requires Node.js v14.0.0 or higher to work.\n\n## Features\n\n[Back to top][toc]\n\n- TypeScript friendly\n- Offers CJS, ESM and UMD builds\n- API similar to [`zod`]\n- Faster than ⚡\n\n## Usage\n\n[Back to top][toc]\n\n**_For complete usages, please dive into our [documentation]_**\n\n### Basic usage\n\n[Back to top][toc]\n\nCreating a simple string validation\n\n```typescript\nimport { s } from '@sapphire/shapeshift';\n\nconst myStringValidation = s.string;\n\n// Parse\nmyStringValidation.parse('sapphire'); // => returns 'sapphire'\nmyStringValidation.parse(12); // throws ValidationError\n```\n\nCreating an object schema\n\n```typescript\nimport { s } from '@sapphire/shapeshift';\n\nconst user = s.object({\n  username: s.string\n});\n\nuser.parse({ username: 'Sapphire' });\n```\n\n### Defining validations\n\n[Back to top][toc]\n\n#### Primitives\n\n[Back to top][toc]\n\n```typescript\nimport { s } from '@sapphire/shapeshift';\n\n// Primitives\ns.string;\ns.number;\ns.bigint;\ns.boolean;\ns.date;\n\n// Empty Types\ns.undefined;\ns.null;\ns.nullish; // Accepts undefined | null\n\n// Catch-all Types\ns.any;\ns.unknown;\n\n// Never Type\ns.never;\n```\n\n#### Literals\n\n[Back to top][toc]\n\n```typescript\ns.literal('sapphire');\ns.literal(12);\ns.literal(420n);\ns.literal(true);\ns.literal(new Date(1639278160000)); // s.date.equal(1639278160000);\n```\n\n#### Strings\n\n[Back to top][toc]\n\nShapeshift includes a handful of string-specific validations:\n\n```typescript\ns.string.lengthLessThan(5);\ns.string.lengthLessThanOrEqual(5);\ns.string.lengthGreaterThan(5);\ns.string.lengthGreaterThanOrEqual(5);\ns.string.lengthEqual(5);\ns.string.lengthNotEqual(5);\ns.string.email;\ns.string.url();\ns.string.uuid();\ns.string.regex(regex);\ns.string.ip();\ns.string.ipv4;\ns.string.ipv6;\ns.string.phone();\n```\n\n#### Numbers\n\n[Back to top][toc]\n\nShapeshift includes a handful of number-specific validations:\n\n```typescript\ns.number.greaterThan(5); // > 5\ns.number.greaterThanOrEqual(5); // >= 5\ns.number.lessThan(5); // < 5\ns.number.lessThanOrEqual(5); // <= 5\ns.number.equal(5); // === 5\ns.number.notEqual(5); // !== 5\n\ns.number.equal(NaN); // special case: Number.isNaN\ns.number.notEqual(NaN); // special case: !Number.isNaN\n\ns.number.int; // value must be an integer\ns.number.safeInt; // value must be a safe integer\ns.number.finite; // value must be finite\n\ns.number.positive; // .greaterThanOrEqual(0)\ns.number.negative; // .lessThan(0)\n\ns.number.divisibleBy(5); // Divisible by 5\n```\n\nAnd transformations:\n\n```typescript\ns.number.abs; // Transforms the number to an absolute number\ns.number.sign; // Gets the number's sign\n\ns.number.trunc; // Transforms the number to the result of `Math.trunc`\ns.number.floor; // Transforms the number to the result of `Math.floor`\ns.number.fround; // Transforms the number to the result of `Math.fround`\ns.number.round; // Transforms the number to the result of `Math.round`\ns.number.ceil; // Transforms the number to the result of `Math.ceil`\n```\n\n#### BigInts\n\n[Back to top][toc]\n\nShapeshift includes a handful of number-specific validations:\n\n```typescript\ns.bigint.greaterThan(5n); // > 5n\ns.bigint.greaterThanOrEqual(5n); // >= 5n\ns.bigint.lessThan(5n); // < 5n\ns.bigint.lessThanOrEqual(5n); // <= 5n\ns.bigint.equal(5n); // === 5n\ns.bigint.notEqual(5n); // !== 5n\n\ns.bigint.positive; // .greaterThanOrEqual(0n)\ns.bigint.negative; // .lessThan(0n)\n\ns.bigint.divisibleBy(5n); // Divisible by 5n\n```\n\nAnd transformations:\n\n```typescript\ns.bigint.abs; // Transforms the bigint to an absolute bigint\n\ns.bigint.intN(5); // Clamps to a bigint to a signed bigint with 5 digits, see BigInt.asIntN\ns.bigint.uintN(5); // Clamps to a bigint to an unsigned bigint with 5 digits, see BigInt.asUintN\n```\n\n#### Booleans\n\n[Back to top][toc]\n\nShapeshift includes a few boolean-specific validations:\n\n```typescript\ns.boolean.true; // value must be true\ns.boolean.false; // value must be false\n\ns.boolean.equal(true); // s.boolean.true\ns.boolean.equal(false); // s.boolean.false\n\ns.boolean.notEqual(true); // s.boolean.false\ns.boolean.notEqual(false); // s.boolean.true\n```\n\n#### Arrays\n\n[Back to top][toc]\n\n```typescript\nconst stringArray = s.array(s.string);\nconst stringArray = s.string.array;\n```\n\nShapeshift includes a handful of array-specific validations:\n\n```typescript\ns.string.array.lengthLessThan(5); // Must have less than 5 elements\ns.string.array.lengthLessThanOrEqual(5); // Must have 5 or less elements\ns.string.array.lengthGreaterThan(5); // Must have more than 5 elements\ns.string.array.lengthGreaterThanOrEqual(5); // Must have 5 or more elements\ns.string.array.lengthEqual(5); // Must have exactly 5 elements\ns.string.array.lengthNotEqual(5); // Must not have exactly 5 elements\ns.string.array.lengthRange(0, 4); // Must have at least 0 elements and less than 4 elements (in math, that is [0, 4))\ns.string.array.lengthRangeInclusive(0, 4); // Must have at least 0 elements and at most 4 elements (in math, that is [0, 4])\ns.string.array.lengthRangeExclusive(0, 4); // Must have more than 0 element and less than 4 elements (in math, that is (0, 4))\ns.string.array.unique; // All elements must be unique. Deep equality is used to check for uniqueness.\n```\n\n> **Note**: All `.length` methods define tuple types with the given amount of elements. For example,\n> `s.string.array.lengthGreaterThanOrEqual(2)`'s inferred type is `[string, string, ...string[]]`\n\n#### Tuples\n\n[Back to top][toc]\n\nUnlike arrays, tuples have a fixed number of elements and each element can have a different type:\n\n```typescript\nconst dish = s.tuple([\n  s.string, // Dish's name\n  s.number.int, // Table's number\n  s.date // Date the dish was ready for delivery\n]);\n\ndish.parse(['Iberian ham', 10, new Date()]);\n```\n\n#### Unions\n\n[Back to top][toc]\n\nShapeshift includes a built-in method for composing OR types:\n\n```typescript\nconst stringOrNumber = s.union(s.string, s.number);\n\nstringOrNumber.parse('Sapphire'); // => 'Sapphire'\nstringOrNumber.parse(42); // => 42\nstringOrNumber.parse({}); // => throws CombinedError\n```\n\n#### Enums\n\n[Back to top][toc]\n\nEnums are a convenience method that aliases `s.union(s.literal(a), s.literal(b), ...)`:\n\n```typescript\ns.enum('Red', 'Green', 'Blue');\n// s.union(s.literal('Red'), s.literal('Green'), s.literal('Blue'));\n```\n\n#### Maps\n\n[Back to top][toc]\n\n```typescript\nconst map = s.map(s.string, s.number);\n// Map<string, number>\n```\n\n#### Sets\n\n[Back to top][toc]\n\n```typescript\nconst set = s.set(s.number);\n// Set<number>\n```\n\n#### Instances\n\n[Back to top][toc]\n\nYou can use `s.instance(Class)` to check that the input is an instance of a class. This is useful to validate inputs\nagainst classes:\n\n```typescript\nclass User {\n  public constructor(public name: string) {}\n}\n\nconst userInstanceValidation = s.instance(User);\nuserInstanceValidation.parse(new User('Sapphire')); // => User { name: 'Sapphire' }\nuserInstanceValidation.parse('oops'); // => throws ValidatorError\n```\n\n#### Records\n\n[Back to top][toc]\n\nRecord validations are similar to objects, but validate `Record<string, T>` types. Keep in mind this does not check for\nthe keys, and cannot support validation for specific ones:\n\n```typescript\nconst tags = s.record(s.string);\n\ntags.parse({ foo: 'bar', hello: 'world' }); // => { foo: 'bar', hello: 'world' }\ntags.parse({ foo: 42 }); // => throws CombinedError\ntags.parse('Hello'); // => throws ValidateError\n```\n\n---\n\n_**Function validation is not yet implemented and will be made available starting v2.1.0**_\n\n#### Functions // TODO\n\n[Back to top][toc]\n\nYou can define function validations. This checks for whether or not an input is a function:\n\n```typescript\ns.function; // () => unknown\n```\n\nYou can define arguments by passing an array as the first argument, as well as the return type as the second:\n\n```typescript\ns.function([s.string]); // (arg0: string) => unknown\ns.function([s.string, s.number], s.string); // (arg0: string, arg1: number) => string\n```\n\n> **Note**: Shapeshift will transform the given function into one with validation on arguments and output. You can\n> access the `.raw` property of the function to get the unchecked function.\n\n---\n\n#### TypedArray\n\n[Back to top][toc]\n\n```ts\nconst typedArray = s.typedArray();\nconst int16Array = s.int16Array;\nconst uint16Array = s.uint16Array;\nconst uint8ClampedArray = s.uint8ClampedArray;\nconst int16Array = s.int16Array;\nconst uint16Array = s.uint16Array;\nconst int32Array = s.int32Array;\nconst uint32Array = s.uint32Array;\nconst float32Array = s.float32Array;\nconst float64Array = s.float64Array;\nconst bigInt64Array = s.bigInt64Array;\nconst bigUint64Array = s.bigUint64Array;\n```\n\nShapeshift includes a handful of validations specific to typed arrays.\n\n```typescript\ns.typedArray().lengthLessThan(5); // Length must be less than 5\ns.typedArray().lengthLessThanOrEqual(5); // Length must be 5 or less\ns.typedArray().lengthGreaterThan(5); // Length must be more than 5\ns.typedArray().lengthGreaterThanOrEqual(5); // Length must be 5 or more\ns.typedArray().lengthEqual(5); // Length must be exactly 5\ns.typedArray().lengthNotEqual(5); // Length must not be 5\ns.typedArray().lengthRange(0, 4); // Length L must satisfy 0 <= L < 4\ns.typedArray().lengthRangeInclusive(0, 4); // Length L must satisfy 0 <= L <= 4\ns.typedArray().lengthRangeExclusive(0, 4); // Length L must satisfy 0 < L < 4\n```\n\nNote that all of these methods have analogous methods for working with the typed array's byte length,\n`s.typedArray().byteLengthX()` - for instance, `s.typedArray().byteLengthLessThan(5)` is the same as\n`s.typedArray().lengthLessThan(5)` but for the array's byte length.\n\n---\n\n### Defining schemas (objects)\n\n[Back to top][toc]\n\n```typescript\n// Properties are required by default:\nconst animal = s.object({\n  name: s.string,\n  age: s.number\n});\n```\n\n#### Utility types for TypeScript\n\n[Back to top][toc]\n\nFor object validation Shapeshift exports 2 utility types that can be used to extract interfaces from schemas and define\nthe structure of a schema as an interface beforehand respectively.\n\n##### Extracting an interface from a schema\n\n[Back to top][toc]\n\nYou can use the `InferType` type to extract the interface from a schema, for example:\n\n```typescript\nimport { InferType, s } from '@sapphire/shapeshift';\n\nconst schema = s.object({\n  foo: s.string,\n  bar: s.number,\n  baz: s.boolean,\n  qux: s.bigint,\n  quux: s.date\n});\n\ntype Inferredtype = InferType<typeof schema>;\n\n// Expected type:\ntype Inferredtype = {\n  foo: string;\n  bar: number;\n  baz: boolean;\n  qux: bigint;\n  quux: Date;\n};\n```\n\n##### Defining the structure of a schema through an interface\n\n[Back to top][toc]\n\nYou can use the `SchemaOf` type to define the structure of a schema before defining the actual schema, for example:\n\n```typescript\nimport { s, SchemaOf } from '@sapphire/shapeshift';\n\ninterface IIngredient {\n  ingredientId: string | undefined;\n  name: string | undefined;\n}\n\ninterface IInstruction {\n  instructionId: string | undefined;\n  message: string | undefined;\n}\n\ninterface IRecipe {\n  recipeId: string | undefined;\n  title: string;\n  description: string;\n  instructions: IInstruction[];\n  ingredients: IIngredient[];\n}\n\ntype InstructionSchemaType = SchemaOf<IInstruction>;\n// Expected Type: ObjectValidator<IInstruction>\n\ntype IngredientSchemaType = SchemaOf<IIngredient>;\n// Expected Type: ObjectValidator<IIngredient>\n\ntype RecipeSchemaType = SchemaOf<IRecipe>;\n// Expected Type: ObjectValidator<IRecipe>\n\nconst instructionSchema: InstructionSchemaType = s.object({\n  instructionId: s.string.optional,\n  message: s.string\n});\n\nconst ingredientSchema: IngredientSchemaType = s.object({\n  ingredientId: s.string.optional,\n  name: s.string\n});\n\nconst recipeSchema: RecipeSchemaType = s.object({\n  recipeId: s.string.optional,\n  title: s.string,\n  description: s.string,\n  instructions: s.array(instructionSchema),\n  ingredients: s.array(ingredientSchema)\n});\n```\n\n#### `.extend`:\n\n[Back to top][toc]\n\nYou can add additional fields using either an object or an ObjectValidator, in this case, you will get a new object\nvalidator with the merged properties:\n\n```typescript\nconst animal = s.object({\n  name: s.string.optional,\n  age: s.number\n});\n\nconst pet = animal.extend({\n  owner: s.string.nullish\n});\n\nconst pet = animal.extend(\n  s.object({\n    owner: s.string.nullish\n  })\n);\n```\n\n> If both schemas share keys, an error will be thrown. Please use `.omit` on the first object if you desire this\n> behaviour.\n\n#### `.pick` / `.omit`:\n\n[Back to top][toc]\n\nInspired by TypeScript's built-in `Pick` and `Omit` utility types, all object schemas have the aforementioned methods\nthat return a modifier version:\n\n```typescript\nconst pkg = s.object({\n  name: s.string,\n  description: s.string,\n  dependencies: s.string.array\n});\n\nconst justTheName = pkg.pick(['name']);\n// s.object({ name: s.string });\n\nconst noDependencies = pkg.omit(['dependencies']);\n// s.object({ name: s.string, description: s.string });\n```\n\n#### `.partial`\n\n[Back to top][toc]\n\nInspired by TypeScript's built-in `Partial` utility type, all object schemas have the aforementioned method that makes\nall properties optional:\n\n```typescript\nconst user = s.object({\n  username: s.string,\n  password: s.string\n}).partial;\n```\n\nWhich is the same as doing:\n\n```typescript\nconst user = s.object({\n  username: s.string.optional,\n  password: s.string.optional\n});\n```\n\n---\n\n#### `.required`\n\n[Back to top][toc]\n\nInspired by TypeScript's built-in `Required` utility type, all object schemas have the aforementioned method that makes\nall properties required:\n\n```typescript\nconst user = s.object({\n  username: s.string.optional,\n  password: s.string.optional\n}).required;\n```\n\nWhich is the same as doing:\n\n```typescript\nconst user = s.object({\n  username: s.string,\n  password: s.string\n});\n```\n\n---\n\n### Handling unrecognized keys\n\n[Back to top][toc]\n\nBy default, Shapeshift will not include keys that are not defined by the schema during parsing:\n\n```typescript\nconst person = s.object({\n  framework: s.string\n});\n\nperson.parse({\n  framework: 'Sapphire',\n  awesome: true\n});\n// => { name: 'Sapphire' }\n```\n\n#### `.strict`\n\n[Back to top][toc]\n\nYou can disallow unknown keys with `.strict`. If the input includes any unknown keys, an error will be thrown.\n\n```typescript\nconst person = s.object({\n  framework: s.string\n}).strict;\n\nperson.parse({\n  framework: 'Sapphire',\n  awesome: true\n});\n// => throws ValidationError\n```\n\n#### `.ignore`\n\n[Back to top][toc]\n\nYou can use the `.ignore` getter to reset an object schema to the default behaviour (ignoring unrecognized keys).\n\n#### `.passthrough`\n\n[Back to top][toc]\n\nYou can use the `.passthrough` getter to make the validator add the unrecognized properties the shape does not have,\nfrom the input.\n\n---\n\n### BaseValidator: methods and properties\n\n[Back to top][toc]\n\nAll validations in Shapeshift contain certain methods.\n\n- #### `.run(data: unknown): Result<T, Error>`: given a validation, you can call this method to check whether or not the\n\n  input is valid. If it is, a `Result` with `success: true` and a deep-cloned value will be returned with the given\n  constraints and transformations. Otherwise, a `Result` with `success: false` and an error is returned.\n\n- #### `.parse(data: unknown): T`: given a validations, you can call this method to check whether or not the input is valid.\n\n  If it is, a deep-cloned value will be returned with the given constraints and transformations. Otherwise, an error is\n  thrown.\n\n- #### `.transform<R>((value: T) => R): NopValidator<R>`: adds a constraint that modifies the input:\n\n```typescript\nimport { s } from '@sapphire/shapeshift';\n\nconst getLength = s.string.transform((value) => value.length);\ngetLength.parse('Hello There'); // => 11\n```\n\n> :warning: `.transform`'s functions **must not throw**. If a validation error is desired to be thrown, `.reshape`\n> instead.\n\n- #### `.reshape<R>((value: T) => Result<R, Error> | IConstraint): NopValidator<R>`: adds a constraint able to both validate\n  and modify the input:\n\n```typescript\nimport { s, Result } from '@sapphire/shapeshift';\n\nconst getLength = s.string.reshape((value) => Result.ok(value.length));\ngetLength.parse('Hello There'); // => 11\n```\n\n> :warning: `.reshape`'s functions **must not throw**. If a validation error is desired to be thrown, use\n> `Result.err(error)` instead.\n\n- #### `.default(value: T | (() => T))`: transform `undefined` into the given value or the callback's returned value:\n\n```typescript\nconst name = s.string.default('Sapphire');\nname.parse('Hello'); // => 'Hello'\nname.parse(undefined); // => 'Sapphire'\n```\n\n```typescript\nconst number = s.number.default(Math.random);\nnumber.parse(12); // => 12\nnumber.parse(undefined); // => 0.989911985608602\nnumber.parse(undefined); // => 0.3224350185068794\n```\n\n> :warning: The default values are not validated.\n\n- #### `.optional`: a convenience method that returns a union of the type with `s.undefined`.\n\n```typescript\ns.string.optional; // s.union(s.string, s.undefined)\n```\n\n- #### `.nullable`: a convenience method that returns a union of the type with `s.nullable`.\n\n```typescript\ns.string.nullable; // s.union(s.string, s.nullable)\n```\n\n- #### `.nullish`: a convenience method that returns a union of the type with `s.nullish`.\n\n```typescript\ns.string.nullish; // s.union(s.string, s.nullish)\n```\n\n- #### `.array`: a convenience method that returns an ArrayValidator with the type.\n\n```typescript\ns.string.array; // s.array(s.string)\n```\n\n- #### `.or`: a convenience method that returns an UnionValidator with the type. This method is also overridden in\n  UnionValidator to just append one more entry.\n\n```typescript\ns.string.or(s.number);\n// => s.union(s.string, s.number)\n\ns.object({ name: s.string }).or(s.string, s.number);\n// => s.union(s.object({ name: s.string }), s.string, s.number)\n```\n\n- #### `.when`: Adjust the schema based on a sibling or sinbling children fields.\n\nFor using when you provide an object literal where the key `is` is undefined, a value, or a matcher function; `then`\nprovides the schema when `is` resolves truthy, and `otherwise` provides the schema when `is` resolves falsey.\n\n##### Available options for providing `is`\n\nWhen `is` is not provided (`=== undefined`) it is strictly resolved as `Boolean(value)` wherein `value` is the current\nvalue of the referenced sibling. Note that if multiple siblings are referenced then all the values of the array need to\nresolve truthy for the `is` to resolve truthy.\n\nWhen `is` is a primitive literal it is strictly compared (`===`) to the current value.\n\nIf you want to use a different form of equality you can provide a function like: `is: (value) => value === true`.\n\n##### Resolving of the `key` (first) parameter\n\nFor resolving the `key` parameter to its respective value we use [lodash/get](https://lodash.com/docs#get). This means\nthat every way that Lodash supports resolving a key to its respective value is also supported by Shapeshift. This\nincludes:\n\n- Simply providing a string or number like `'name'` or `1`.\n- Providing a string or number with a dot notation like `'name.first'` (representative of a nested object structure of\n  `{ 'name': { 'first': 'Sapphire' } }` => resolves to `Sapphire`).\n- Providing a string or number with a bracket notation like `'name[0]'` (representative of an array structure of\n  `{ 'name': ['Sapphire', 'Framework'] }` => resolves to `Sapphire`).\n- Providing a string or number with a dot and bracket notation like `'name[1].first'` (representative of a nested object\n  structure of `{ 'name': [{ 'first': 'Sapphire' }, { 'first': 'Framework' }] }` => resolves to `Framework`).\n\n##### Examples\n\nLet's start with a basic example:\n\n```typescript\nconst whenPredicate = s.object({\n  booleanLike: s.boolean,\n  numberLike: s.number.when('booleanLike', {\n    then: (schema) => schema.greaterThanOrEqual(5),\n    otherwise: (schema) => schema.lessThanOrEqual(5)\n  })\n});\n\nwhenPredicate.parse({ booleanLike: true, numberLike: 6 });\n// => { booleanLike: true, numberLike: 6 }\n\nwhenPredicate.parse({ booleanLike: true, numberLike: 4 });\n// => ExpectedConstraintError('s.number.greaterThanOrEqual', 'Invalid number value', 4, 'expected >= 5')\n\nwhenPredicate.parse({ booleanLike: false, numberLike: 4 });\n// => { booleanLike: false, numberLike: 4 }\n```\n\nThe provided key can also be an array of sibling children:\n\n```typescript\nconst whenPredicate = s.object({\n  booleanLike: s.boolean,\n  stringLike: s.string,\n  numberLike: s.number.when(['booleanLike', 'stringLike'], {\n\tis: ([booleanLikeValue, stringLikeValue]) => booleanLikeValue === true && stringLikeValue === 'foobar',\n    then: (schema) => schema.greaterThanOrEqual(5),\n    otherwise: (schema) => schema.lessThanOrEqual(5)\n  })\n});\n\nwhenPredicate.parse({ booleanLike: true, stringLike: 'foobar', numberLike: 6 });\n// => { booleanLike: true, numberLike: 6 }\n\nwhenPredicate.parse({ booleanLike: true, stringLike: 'barfoo', numberLike: 4 });\n// => ExpectedConstraintError('s.number.greaterThanOrEqual', 'Invalid number value', 4, 'expected >= 5')\n\nwhenPredicate.parse({ booleanLike: false, stringLike: 'foobar' numberLike: 4 });\n// => ExpectedConstraintError('s.number.greaterThanOrEqual', 'Invalid number value', 4, 'expected >= 5')\n```\n\n### Enabling and disabling validation\n\n[Back to top][toc]\n\nAt times, you might want to have a consistent code base with validation, but would like to keep validation to the strict\nnecessities instead of the in-depth constraints available in shapeshift. By calling `setGlobalValidationEnabled` you can\ndisable validation at a global level, and by calling `setValidationEnabled` you can disable validation on a\nper-validator level.\n\n> When setting the validation enabled status per-validator, you can also set it to `null` to use the global setting.\n\n```typescript\nimport { setGlobalValidationEnabled } from '@sapphire/shapeshift';\n\nsetGlobalValidationEnabled(false);\n```\n\n```typescript\nimport { s } from '@sapphire/shapeshift';\n\nconst predicate = s.string.lengthGreaterThan(5).setValidationEnabled(false);\n```\n\n## Buy us some doughnuts\n\n[Back to top][toc]\n\nSapphire Community is and always will be open source, even if we don't get donations. That being said, we know there are\namazing people who may still want to donate just to show their appreciation. Thank you very much in advance!\n\nWe accept donations through Open Collective, Ko-fi, Paypal, Patreon and GitHub Sponsorships. You can use the buttons\nbelow to donate through your method of choice.\n\n|   Donate With   |                       Address                       |\n| :-------------: | :-------------------------------------------------: |\n| Open Collective | [Click Here](https://sapphirejs.dev/opencollective) |\n|      Ko-fi      |      [Click Here](https://sapphirejs.dev/kofi)      |\n|     Patreon     |    [Click Here](https://sapphirejs.dev/patreon)     |\n|     PayPal      |     [Click Here](https://sapphirejs.dev/paypal)     |\n\n## Contributors\n\n[Back to top][toc]\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kyranet\"><img src=\"https://avatars.githubusercontent.com/u/24852502?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Román</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=kyranet\" title=\"Code\">💻</a> <a href=\"https://github.com/sapphiredev/shapeshift/commits?author=kyranet\" title=\"Documentation\">📖</a> <a href=\"#ideas-kyranet\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/vladfrangu\"><img src=\"https://avatars.githubusercontent.com/u/17960496?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Frangu</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=vladfrangu\" title=\"Code\">💻</a> <a href=\"https://github.com/sapphiredev/shapeshift/commits?author=vladfrangu\" title=\"Documentation\">📖</a> <a href=\"#ideas-vladfrangu\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://favware.tech/\"><img src=\"https://avatars.githubusercontent.com/u/4019718?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeroen Claassens</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=favna\" title=\"Documentation\">📖</a> <a href=\"#maintenance-favna\" title=\"Maintenance\">🚧</a> <a href=\"#infra-favna\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n    <td align=\"center\"><a href=\"https://github.com/apps/renovate\"><img src=\"https://avatars.githubusercontent.com/in/2740?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>renovate[bot]</b></sub></a><br /><a href=\"#maintenance-renovate[bot]\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://renovate.whitesourcesoftware.com/\"><img src=\"https://avatars.githubusercontent.com/u/25180681?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>WhiteSource Renovate</b></sub></a><br /><a href=\"#maintenance-renovate-bot\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Khasms\"><img src=\"https://avatars.githubusercontent.com/u/36800359?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>John</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=Khasms\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/imranbarbhuiya\"><img src=\"https://avatars.githubusercontent.com/u/74945038?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Parbez</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=imranbarbhuiya\" title=\"Code\">💻</a> <a href=\"https://github.com/sapphiredev/shapeshift/commits?author=imranbarbhuiya\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/sapphiredev/shapeshift/issues?q=author%3Aimranbarbhuiya\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/sapphiredev/shapeshift/commits?author=imranbarbhuiya\" title=\"Documentation\">📖</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/apps/allcontributors\"><img src=\"https://avatars.githubusercontent.com/in/23186?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>allcontributors[bot]</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=allcontributors[bot]\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/RealShadowNova\"><img src=\"https://avatars.githubusercontent.com/u/46537907?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Hezekiah Hendry</b></sub></a><br /><a href=\"#tool-RealShadowNova\" title=\"Tools\">🔧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/legendhimslef\"><img src=\"https://avatars.githubusercontent.com/u/69213593?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Voxelli</b></sub></a><br /><a href=\"https://github.com/sapphiredev/shapeshift/commits?author=legendhimslef\" title=\"Documentation\">📖</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification.\nContributions of any kind welcome!\n\n[`zod`]: https://github.com/colinhacks/zod\n[documentation]: https://www.sapphirejs.dev/docs/Documentation/api-shapeshift/\n[toc]: #table-of-contents\n",
    "licenseText": "# The MIT License (MIT)\n\nCopyright © `2021` `The Sapphire Community and its contributors`\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the “Software”), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@sapphire/shapeshift/-/shapeshift-3.8.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@sapphire/shapeshift/-/shapeshift-3.8.1.tgz",
    "hash": "",
    "integrity": "sha512-xG1oXXBhCjPKbxrRTlox9ddaZTvVpOhYLmKmApD/vIWOV1xEYXnpoFs68zHIZBGbqztq6FrUPNPerIrO1Hqeaw==",
    "registry": "npm",
    "packageName": "@sapphire/shapeshift",
    "cacheIntegrity": "sha512-xG1oXXBhCjPKbxrRTlox9ddaZTvVpOhYLmKmApD/vIWOV1xEYXnpoFs68zHIZBGbqztq6FrUPNPerIrO1Hqeaw== sha1-uY3GpxgPmzghkmeRey5voz+exlY="
  },
  "registry": "npm",
  "hash": "c46d685d70610a33ca6f1ad14e5a31f5d75a653bd5a4e8582e62a60290ffbc858e575c446179e9a05b3af331c864119bab3b6ae85ad43cd3deac8aced47a9e6b"
}